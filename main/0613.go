package main

import (
	"fmt"
	"sort"
	"strconv"
)

func finalPrices(prices []int) []int {
	l := len(prices)
	var count int
	ans := make([]int, l)
	for i := 0; i < l; i++ {
		count = 0
		for j := i + 1; j < l; j++ {
			if prices[j] < prices[i] {
				count = prices[j]
				break
			}
		}
		ans[i] = prices[i] - count
	}
	return ans
}

type SubrectangleQueries struct {
	rect [][]int
}

func Constructor(rectangle [][]int) SubrectangleQueries {
	s := new(SubrectangleQueries)
	s.rect = rectangle
	return *s
}

func (this *SubrectangleQueries) UpdateSubrectangle(row1 int, col1 int, row2 int, col2 int, newValue int) {
	for i := row1; i <= row2; i++ {
		for j := col1; j <= col2; j++ {
			this.rect[i][j] = newValue
		}
	}
}

func (this *SubrectangleQueries) GetValue(row int, col int) int {
	return this.rect[row][col]
}

func runningSum(nums []int) []int {
	l := len(nums)
	ans := make([]int, l)
	sum := 0
	for i := 0; i < l; i++ {
		sum += nums[i]
		ans[i] = sum
	}
	return ans
}
func findLeastNumOfUniqueInts(arr []int, k int) int {
	mapcount := make(map[int]int)
	l := len(arr)
	for i := 0; i < l; i++ {
		c, ok := mapcount[arr[i]]
		if ok {
			mapcount[arr[i]] = c + 1
		} else {
			mapcount[arr[i]] = 1
		}
	}
	var count []int
	for _, v := range mapcount {
		count = append(count, v)
	}
	sort.Ints(count)
	fmt.Println(count)
	for i := 0; i < len(count); i++ {
		k -= count[i]
		if k < 0 {
			return len(count) - i
		}
		if k == 0 {
			return len(count) - i - 1
		}
	}
	return 0
}

//[1,2,3,10,2,5,6,10], m = 3 花, 相邻 k = 2
//[2,3,10,10,5,6,10,
func minDays(bloomDay []int, m int, k int) int {
	l := len(bloomDay)
	if m*k > l {
		return -1
	}
	return 0
}

//type TreeAncestor struct {
//	ans    [5009][5009]int
//	parent []int
//	n      int
//}

//
//func Constructor(n int, parent []int) TreeAncestor {
//	var ans [5009][5009]int
//	for i := 0; i < 5009; i++ {
//		for j :=0; j < 5009; j++ {
//			ans[i][j] = -2
//		}
//	}
//	return TreeAncestor{
//		parent: parent,
//		n:      n,
//		ans: ans,
//	}
//}

//func (this *TreeAncestor) GetKthAncestor(node int, k int) int {
//	if this.ans[node][k] != -2 {
//		return this.ans[node][k]
//	}
//	base := node
//	for i := k - 1; i >= 0; i-- {
//		if node == -1 {
//			return node
//		}
//		node = this.parent[node]
//		this.ans[node][i] = node
//	}
//	this.ans[base][k] = node
//	return node
//}

// 输入：arr = [3,1,1,1,5,1,2,1], target = 3
//输出：3
//解释：注意子数组 [1,2] 和 [2,1] 不能成为一个方案因为它们重叠了。
// 滑动窗口 加 dp
func minSumOfLengths(arr []int, target int) int {
	l := len(arr)
	j := 0
	sum := 0
	var sta, end []int
	// 滑动窗口双指针
	for i := 0; i < l; i++ {
		sum += arr[i]
		if sum == target {
			sta = append(sta, j)
			end = append(end, i)
		}
		for sum >= target {
			sum -= arr[j]
			j++
			if sum == target {
				sta = append(sta, j)
				end = append(end, i)
			}
		}
	}
	lc := len(end)
	if lc < 2 {
		return -1
	}

	// dp求不相交最小
	index := 0
	min := 1 << 24
	//arr[i]的左边最小长度
	left := make([]int, l)
	//arr[i]的右边最小长度
	right := make([]int, l)
	for i := 0; i < l; i++ {
		if index >= len(sta) {
			break
		}
		if i == end[index] {
			min = minNum(min, end[index]-sta[index]+1)
			index++
		}
		left[i] = min
	}
	index = len(sta) - 1
	min = 1 << 24
	for i := l - 1; i >= 0; i-- {
		if index < 0 {
			break
		}
		if i == sta[index] {
			min = minNum(min, end[index]-sta[index]+1)
			index--
		}
		right[i] = min
	}
	ans := 1 << 24
	//吐血调试dp
	for i := 0; i < l-1; i++ {
		ans = minNum(ans, left[i]+right[i+1])
	}
	if ans == 1<<24 {
		return -1
	}
	return ans
}

func minNum(m int, i int) int {
	if m < i {
		return m
	} else {
		return i
	}
}

type TreeAncestor struct {
	nums   []int
	parent []int
	resMap map[int]int
}

func Constructor(n int, parent []int) TreeAncestor {
	tmpNums := make([]int, n)
	tmpParent := make([]int, n)
	resMap := make(map[int]int, 0)
	for i := 0; i < n; i++ {
		tmpNums[i] = i
		tmpParent[i] = parent[i]
		resMap[parent[i]] = 1
	}
	return TreeAncestor{nums: tmpNums, parent: tmpParent, resMap: resMap}
}

func (this *TreeAncestor) GetKthAncestor(node int, k int) int {
	if k > node {
		return -1
	}
	if len(this.resMap) == len(this.parent) {
		return node - k
	}
	for k >= 1 && node >= 0 {
		node = this.parent[node]
		k--
	}
	return node
}

func main() {
	//a := []int{}
	//
	//lengths := minSumOfLengths(a, 592)
	//fmt.Println(lengths)
	//fmt.Println(findLeastNumOfUniqueInts([]int{4,1,3,2,4},  2))
	//fmt.Println(minSumOfLengths([]int{3, 1, 1, 1, 5, 1, 2, 1}, 3))
	var num uint64 = 234234234
	fmt.Println(strconv.FormatUint(num, 10))
}
